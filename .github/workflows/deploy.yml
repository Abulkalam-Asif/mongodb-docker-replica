name: Deploy MongoDB ReplicaSet to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e

            echo "üê≥ Checking if Docker is installed..."
            if ! command -v docker &> /dev/null; then
              echo "üì• Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $(whoami)
            else
              echo "‚úÖ Docker is already installed."
            fi

            echo "üì¶ Checking if Docker Compose plugin is installed..."
            if ! docker compose version &> /dev/null; then
              echo "üì• Installing Docker Compose plugin..."
              DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
              mkdir -p $DOCKER_CONFIG/cli-plugins
              curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
              chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
            else
              echo "‚úÖ Docker Compose plugin is already installed."
            fi

            echo "üîÑ Updating repository..."
            if [ -d mongodb-docker-replica/.git ]; then
              cd mongodb-docker-replica
              git pull origin main
            else
              sudo rm -rf mongodb-docker-replica
              git clone git@github.com:Abulkalam-Asif/mongodb-docker-replica.git
              cd mongodb-docker-replica
            fi

            echo "üßº Cleaning up Docker system..."
            sudo docker compose down -v || true
            sudo docker system prune -af --volumes || true

            echo "üîë Ensuring keyfile exists with correct permissions..."
            if [ ! -f mongo-keyfile ]; then
              openssl rand -base64 756 > mongo-keyfile
            fi

            sudo chmod 400 mongo-keyfile
            sudo chown 999:999 mongo-keyfile

            echo "üì¶ Setting environment variables..."
            export MONGO_INITDB_ROOT_USERNAME=admin
            export MONGO_INITDB_ROOT_PASSWORD=supersecret
            export REPLICA_SET_NAME=rs0

            echo "üöÄ Starting MongoDB replica containers..."
            sudo docker compose up -d --build

            echo "‚è≥ Waiting for containers to be ready..."
            sleep 30

            echo "üîç Checking replica set initialization..."
            if ! sudo docker exec mongo1 mongosh -u admin -p supersecret --authenticationDatabase admin --quiet --eval "rs.status().ok" 2>/dev/null | grep -q 1; then
              echo "‚öôÔ∏è Initializing replica set..."
              sudo docker exec mongo1 mongosh -u admin -p supersecret --authenticationDatabase admin --quiet << 'EOM'
              rs.initiate({
                _id: "rs0",
                members: [
                  { _id: 0, host: "mongo1:27017" },
                  { _id: 1, host: "mongo2:27017" },
                  { _id: 2, host: "mongo3:27017" }
                ]
              });
              EOM
              echo "üîÑ Waiting for replica set to initialize..."
              sleep 20
              # Verify initialization
              sudo docker exec mongo1 mongosh -u admin -p supersecret --authenticationDatabase admin --quiet --eval "rs.status()"
            else
              echo "‚úÖ Replica set already initialized"
            fi

            echo "üìä Final replica set status:"
            sudo docker exec mongo1 mongosh -u admin -p supersecret --authenticationDatabase admin --quiet --eval "rs.status()"
          EOF